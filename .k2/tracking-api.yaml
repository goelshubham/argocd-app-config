apiVersion: platform.segment.com/v1alpha1
kind: SegmentApplicationExperimental
metadata:
  name: tracking-api
  namespace: ingest
spec:
  targets:
  - name: stage-euw1-core
    cluster: stage-euw1:eu-west-1:core
    labels:
      enabled: true
    pool: ingest
    replicatedService:
      iamRoleName: tracking-api

      terminationGracePeriodSeconds: 60
      podAnnotations:
        prometheus.io/scrape: 'true'

      autoScale:
        minReplicas: 6
        maxReplicas: 3000
        resource: cpu
        utilization: 50

      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app: tracking-api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      - labelSelector:
          matchLabels:
            app: tracking-api
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      
      mainContainers:
      - name: tracking-api
        imageName: tracking-api
        args:
          - -nsqd=$(NODE_IP):4150
          - -blue-topic=requests
          - -green-topic=requests
          - -overflow-topic=requests-overflow
          - -shutdown-delay=30s
          - -metrics-bind=:9090
          - -tracing.address=$(NODE_IP):4876
          - -datadog=$(NODE_IP):8125
        ports:
          - containerPort: 3000
            name: http
          - containerPort: 9090
            name: metrics
        env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        resources:
          limits:
            cpu: 1
            memory: 2048Mi
        readinessProbe:
          httpGet:
            path: /internal/health
            port: http
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /internal/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10

    targetGroupBindings:
      # We've created 1 ALB(s) to shard traffic to the public-facing endpoint.
      # The following TargetGroup configuration essentially tells the AWS ALB controller to create additional copies of
      # the above TargetGroup as AWS does not allow a TG to be attached to multiple ALBs.
      # More details in https://paper.dropbox.com/doc/SDD-inbound-tracking-api-ALB-sharding-eUs7kqpRj02hGGz6bnwGF
      - name: tracking-api-0
        spec:
          networking:
            ingress:
              - from:
                  - securityGroup:
                      groupID: sg-02faf432cc846468b
                ports:
                  - port: http
                    protocol: TCP
          serviceRef:
            name: tracking-api
            port: http
          targetGroupARN: arn:aws:elasticloadbalancing:eu-west-1:625556616625:targetgroup/track20220502082230550200000006/33936d9f0ee461fa
          targetType: ip

  #
  # The tracking-api prod-euw1 target resource allocation is based on a c5.4xlarge instance (16vcpus, 32GB mem).
  # Each POD will have 2 cpus with 1 guaranteed for tracking-api.
  # With this allocation allocation, we are expecting up to 7 tracking-api PODs per instance.
  #
  - name: prod-euw1-core
    cluster: prod-euw1:eu-west-1:core
    labels:
      enabled: true
    pool: ingest
    replicatedService:
      iamRoleName: tracking-api

      terminationGracePeriodSeconds: 60
      podAnnotations:
        prometheus.io/scrape: 'true'

      autoScale:
        minReplicas: 6
        maxReplicas: 3000
        resource: cpu
        utilization: 70
      
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app: tracking-api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      - labelSelector:
          matchLabels:
            app: tracking-api
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway

      mainContainers:
      - name: tracking-api
        imageName: tracking-api
        args:
          - -nsqd=$(NODE_IP):4150
          - -blue-topic=requests
          - -green-topic=requests
          - -overflow-topic=requests-overflow
          - -shutdown-delay=30s
          - -metrics-bind=:9090
          - -tracing.address=$(NODE_IP):4876
          - -datadog=$(NODE_IP):8125
        ports:
          - containerPort: 3000
            name: http
          - containerPort: 9090
            name: metrics
        env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        resources:
          limits:
            cpu: 1
            memory: 2048Mi
          requests:
            cpu: 1
            memory: 2048Mi
        readinessProbe:
          httpGet:
            path: /internal/health
            port: http
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /internal/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10


    targetGroupBindings:
      - name: tracking-api
        spec:
          networking:
            ingress:
            - from:
              - securityGroup:
                  groupID: sg-08b5e9c9e588d9187
              ports:
              - port: http
                protocol: TCP
          serviceRef:
            name: tracking-api
            port: http
          targetGroupARN: arn:aws:elasticloadbalancing:eu-west-1:987559104172:targetgroup/track20210701193356003000000003/433d6762d718cf87
          targetType: ip

      # We've created 1 ALB(s) to shard traffic to the public-facing endpoint.
      # The following TargetGroup configuration essentially tells the AWS ALB controller to replicate TargetGroup config
      # as AWS does not allow a TG to be attached to multiple ALBs.
      # More details in https://paper.dropbox.com/doc/SDD-inbound-tracking-api-ALB-sharding-eUs7kqpRj02hGGz6bnwGF
      - name: tracking-api-0
        spec:
          networking:
            ingress:
              - from:
                  - securityGroup:
                      groupID: sg-053adb47261f3fbbd
                ports:
                  - port: http
                    protocol: TCP
          serviceRef:
            name: tracking-api
            port: http
          targetGroupARN: arn:aws:elasticloadbalancing:eu-west-1:987559104172:targetgroup/track20220519123310161500000002/9f68b6bf696934ba
          targetType: ip

  - name: stage-usw2-shard-ingest-0
    cluster: stage:us-west-2:ingest-0
    shard: ingest-0
    labels:
      enabled: true
    pool: ingest
    replicatedService: &replicatedServiceShard
      namespace: ingest-0
      iamRoleName: tracking-api

      terminationGracePeriodSeconds: 60
      podAnnotations:
        prometheus.io/scrape: 'true'

      autoScale:
        minReplicas: 3
        maxReplicas: 30
        resource: cpu
        utilization: 50

      mainContainers:
        - name: tracking-api
          imageName: tracking-api
          args:
            - -nsqd=$(NODE_IP):4150
            - -blue-topic=requests
            - -green-topic=requests
            - -overflow-topic=requests-overflow
            - -shutdown-delay=30s
            - -metrics-bind=:9090
            - -datadog=$(NODE_IP):8125
          ports:
            - containerPort: 3000
              name: http
            - containerPort: 9090
              name: metrics
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
          readinessProbe:
            httpGet:
              path: /internal/health
              port: http
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /internal/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10

    targetGroupBindings:
      - name: tracking-api
        spec:
          networking:
            ingress:
              - from:
                  - securityGroup:
                      groupID: sg-06ec84afc3f6d9c76
                ports:
                  - port: http
                    protocol: TCP
          serviceRef:
            name: tracking-api
            port: http
          targetGroupARN: arn:aws:elasticloadbalancing:us-west-2:355207333203:targetgroup/in20220310195328683000000001/1d7386bf335c71ab
          targetType: ip
  
  - name: stage-usw2-shard-ingest-1
    cluster: stage:us-west-2:ingest-0
    shard: ingest-1
    labels:
      enabled: true
    pool: ingest
    replicatedService:
      <<: *replicatedServiceShard
      namespace: ingest-1

    targetGroupBindings:
      - name: tracking-api
        spec:
          networking:
            ingress:
              - from:
                  - securityGroup:
                      groupID: sg-0c0ef3fc4eef1732a
                ports:
                  - port: http
                    protocol: TCP
          serviceRef:
            name: tracking-api
            port: http
          targetGroupARN: arn:aws:elasticloadbalancing:us-west-2:355207333203:targetgroup/in20220222231319635900000001/3ffb181d6f60f231
          targetType: ip
  
  - name: stage-usw2-shard-ingest-2
    cluster: stage:us-west-2:ingest-0
    shard: ingest-2
    labels:
      enabled: true
    pool: ingest
    replicatedService:
      <<: *replicatedServiceShard
      namespace: ingest-2

    targetGroupBindings:
      - name: tracking-api
        spec:
          networking:
            ingress:
              - from:
                  - securityGroup:
                      groupID: sg-018ae7d50b581880b
                ports:
                  - port: http
                    protocol: TCP
          serviceRef:
            name: tracking-api
            port: http
          targetGroupARN: arn:aws:elasticloadbalancing:us-west-2:355207333203:targetgroup/in20220224230930913800000001/017239999792e6bc
          targetType: ip          